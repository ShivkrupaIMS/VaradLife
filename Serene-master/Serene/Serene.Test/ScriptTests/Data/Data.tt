<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)Serenity.Core.dll" #>
<#@ assembly name="$(TargetDir)Serenity.Data.dll" #>
<#@ assembly name="$(TargetDir)Serenity.Data.Entity.dll" #>
<#@ assembly name="$(TargetDir)Serenity.Services.dll" #>
<#@ assembly name="$(TargetDir)Serenity.Web.dll" #>
<#@ assembly name="$(TargetDir)Serene.Web.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Serenity" #>
<#@ import namespace="Serenity.Abstractions" #>
<#@ import namespace="Serenity.CodeGeneration" #>
<#@ import namespace="Serenity.ComponentModel" #>
<#@ import namespace="Serenity.Extensibility" #>
<#@ import namespace="Serenity.Localization" #>
<#@ import namespace="Serenity.Web" #>
<#@ include file="..\MultipleOutputHelper.ttinclude" #>
<#@ output extension=".log" #>
<# 
	ExtensibilityHelper.SelfAssemblies = new[] {
		typeof(Serenity.Authorization).Assembly,
		typeof(Serenity.Data.SqlHelper).Assembly,
		typeof(Serenity.Data.Row).Assembly,
		typeof(Serenity.Services.DeleteRequest).Assembly,
		typeof(Serenity.Web.CommonInitialization).Assembly,
		typeof(Serene.SiteInitialization).Assembly
	};

    var container = new MunqContainer();
    Dependency.SetResolver(container);

    var webDir = Host.ResolvePath(@"..\..\..\Serene.Web\");
    var codeByFilename = new SortedDictionary<string, string>();
    
	LocalTextGenerator.Initialize(webDir);
	codeByFilename["TemplateBundle.js"] = new TemplateBundleGenerator().Run(
        webDir + @"Modules\",
		webDir + @"Views\Templates\");
	codeByFilename["FormBundle.js"] = new FormBundleGenerator().Run();
	codeByFilename["ColumnsBundle.js"] = new ColumnsBundleGenerator().Run();
	codeByFilename["LocalText.Site.en.Public.js"] = new LocalTextGenerator().Run("en");
	codeByFilename["LocalText.Site.tr.Public.js"] = new LocalTextGenerator().Run("tr");
    var manager = Manager.Create(Host, GenerationEnvironment);
    foreach (var pair in codeByFilename) 
    {
        manager.StartNewFile(pair.Key);
#>
<#=pair.Value#>
<# 
        manager.EndBlock(); 
    }

    manager.Process(true);
#>
Executed on <#=DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")#><#+

    public class TemplateBundleGenerator
    {
        const string TemplateSuffix = ".Template.html";

        private string GetKey(string filename)
        {
            string key = Path.GetFileName(filename);

            if (!key.EndsWith(TemplateSuffix, StringComparison.OrdinalIgnoreCase))
                return null;

            return key.Substring(0, key.Length - TemplateSuffix.Length);
        }

        public string Run(params string[] rootPaths)
        {
            var bundleList = new List<Func<string>>();

            foreach (var rootPath in rootPaths)
            {
                if (!Directory.Exists(rootPath))
                    continue;

                foreach (var file in Directory.EnumerateFiles(rootPath, 
                    "*.html", SearchOption.AllDirectories))
                {
                    var key = GetKey(file);
                    if (key == null)
                        continue;

                    var script = new TemplateScript(key, () => File.ReadAllText(file));
                    bundleList.Add(script.GetScript);
                }
            }

            var bundle = new ConcatenatedScript(bundleList);
            return bundle.GetScript();
        }
    }

    public class FormBundleGenerator
    {
        public string Run()
        {
            var assemblies = ExtensibilityHelper.SelfAssemblies;
            var scripts = new List<Func<string>>();
			//throw new Exception(JSON.Stringify(assemblies.Select(x => x.FullName)));
            foreach (var assembly in assemblies)
                foreach (var type in assembly.GetTypes())
                {
                    var attr = type.GetCustomAttribute<FormScriptAttribute>();
                    if (attr != null)
                    {
                        var script = new FormScript(attr.Key, type);
                        scripts.Add(script.GetScript);
                    }
                }

            return new ConcatenatedScript(scripts).GetScript();
        }
    }

    public class ColumnsBundleGenerator
    {
        public string Run()
        {
            var assemblies = ExtensibilityHelper.SelfAssemblies;
            var scripts = new List<Func<string>>();
			//throw new Exception(JSON.Stringify(assemblies.Select(x => x.FullName)));
            foreach (var assembly in assemblies)
                foreach (var type in assembly.GetTypes())
                {
                    var attr = type.GetCustomAttribute<ColumnsScriptAttribute>();
                    if (attr != null)
                    {
                        var script = new ColumnsScript(attr.Key, type);
                        scripts.Add(script.GetScript);
                    }
                }

            return new ConcatenatedScript(scripts).GetScript();
        }
    }

	public class LocalTextGenerator
	{
		public static void Initialize(string webDir) 
		{
            var registrar = Dependency.Resolve<IDependencyRegistrar>();
            registrar.RegisterInstance<ILocalTextRegistry>(new LocalTextRegistry());
            NestedLocalTextRegistration.Initialize(ExtensibilityHelper.SelfAssemblies);
            EnumLocalTextRegistration.Initialize(ExtensibilityHelper.SelfAssemblies);
            EntityLocalTexts.Initialize();
            JsonLocalTextRegistration.AddFromFilesInFolder(webDir + @"Scripts\serenity\texts\");
            JsonLocalTextRegistration.AddFromFilesInFolder(webDir + @"Scripts\site\texts\");
            JsonLocalTextRegistration.AddFromFilesInFolder(webDir + @"App_Data\texts\");
		}

		public string Run(string languageId)
		{
			return LocalTextScript.GetLocalTextPackageScript(new[] {
				"Controls.", "Db.", "Dialogs.", "Enums.", "Forms.", 
				"Permission.", "Site.", "Validation."
			}, languageId, false);
		}
	}
#>